*rg-glob-builder.txt*                                 Last change: 2025 May 31

==============================================================================
Table of Contents                          *rg-glob-builder-table-of-contents*

Setup ................................................ |rg-glob-builder-setup|
Types  .............................................. |rg-glob-builder-types-|
Exports ............................................ |rg-glob-builder-exports|
`build` .............................................. |rg-glob-builder-build|
`fzf_lua_adapter` .......................... |rg-glob-builder-fzf_lua_adapter|
`telescope_adapter` ...................... |rg-glob-builder-telescope_adapter|
TODO .................................................. |rg-glob-builder-todo|

==============================================================================
RG-GLOB-BUILDER.NVIM                    *rg-glob-builder-rg-glob-builder.nvim*


A neovim plugin to generate intuitive glob patterns for searching with `rg`.

>lua
    require "rg-glob-builder".build { 
      prompt = "~require~ -e rb md !lua -d plugins !feature_* -f !*.test.* *_spec.rb", 
    }
<
generates:

>bash
    --ignore-case --glob '{*_spec.rb,*.rb,*.md,**/plugins/**}' --glob !'{*.test.*,*.lua,**/feature_*/**}' -- 'require'
<
By using two glob flags, the generated `rg` command reads like the following:

Search for `require` in: (files that end in `_spec.rb` OR `.rb` OR `.md` OR
are within the `plugins` directory) AND (files that don't end in `*.test.*` OR
`.lua` OR are not within a directory beginning with `feature_`)

This AND/OR structure matches the VSCode global search and replace interface,
which I find to be the most intuitive.


------------------------------------------------------------------------------
SETUP                                                  *rg-glob-builder-setup*


If an option is passed to `setup`, it will be inherited by `build`,
`fzf_lua_adapter`, and `telescope_adapter`. If an option is passed to both
`setup` and directly to `build`, `fzf_lua_adapter`, or `telescope_adapter`,
the latter will take precedence.

>lua
    -- Default options, no need to pass these to `setup`
    require "rg-glob-builder".setup {
      custom_flags = {
        -- The flag to include or negate a directory to the glob pattern. Extensions are 
        -- updated internally to "**/[directory]/**"
        directory = "-d",
        -- The flag to include or negate an extension to the glob pattern. Extensions are 
        -- prefixed internally with "*."
        extension = "-e",
        -- The flag to include or negate a file to the glob pattern. Files are passed without 
        -- modification to the glob
        file = "-f",
        -- The flag to search case sensitively, adds the `--case-sensitive` flag
        case_sensitive = "-c",
        -- The flag to search case insensitively, adds the `--case-ignore` flag
        ignore_case = "-nc",
        -- The flag to search case by whole word, adds the `--word-regexp` flag
        whole_word = "-w",
        -- The flag to search case by partial word, removes the `--word-regexp` flag 
        -- Searching by partial word is the default behavior in rg
        partial_word = "-nw",
      },
      -- Return `nil` unless the final character is a trailing space. When updating the flags, 
      -- this option will maintain the current search results until the update is complete
      nil_unless_trailing_space = false,
      -- The single-char string to act as the delimeter for the pattern to pass to rg
      pattern_delimeter = "~",
      -- Quote the rg pattern and glob flags in single quotes. Defaults to true, except for in 
      -- the `fzf_lua_adapter`
      auto_quote = true
    }
<

------------------------------------------------------------------------------
TYPES                                                 *rg-glob-builder-types-*


>lua
    --- @class RgGlobBuilderSetupOpts
    --- @field pattern_delimeter? string
    --- @field custom_flags? RgPatternBuilderSetupOptsCustomFlags
    --- @field nil_unless_trailing_space? boolean
    --- @field auto_quote? boolean
    
    --- @class RgPatternBuilderSetupOptsCustomFlags
    --- @field extension? string
    --- @field file? string
    --- @field directory? string
    --- @field case_sensitive? string
    --- @field ignore_case? string
    --- @field whole_word? string
    --- @field partial_word? string
    
    --- @class FzfLuaAdapterOpts
    --- @field fzf_lua_opts table
    --- @field rg_glob_builder_opts RgGlobBuilderSetupOpts
    
    --- @class TelescopeAdapterOpts
    --- @field telescope_opts table
    --- @field rg_glob_builder_opts RgGlobBuilderSetupOpts
    
    --- @class RgGlobBuilderBuildOpts: RgGlobBuilderSetupOpts
    --- @field prompt string
<

------------------------------------------------------------------------------
EXPORTS                                              *rg-glob-builder-exports*



                                                                              
`BUILD`                                                *rg-glob-builder-build*

>lua
    -- RgGlobBuilderBuildOpts
    require "rg-glob-builder".build {
      prompt = "" -- The primary pattern to search
      -- ... RgGlobBuilderSetupOpts
    }
<

                                                                              
`FZF_LUA_ADAPTER`                            *rg-glob-builder-fzf_lua_adapter*

>lua
    -- FzfLuaAdapterOpts
    require "rg-glob-builder".fzf_lua_adapter {
      -- Standard fzf-lua options https://github.com/ibhagwan/fzf-lua#customization
      fzf_lua_opts = {}
    
      -- RgGlobBuilderSetupOpts
      rg_glob_builder_opts = {}
    }
<

                                                                              
`TELESCOPE_ADAPTER`                        *rg-glob-builder-telescope_adapter*

>lua
    -- TelescopeAdapterOpts
    require "rg-glob-builder".telescope_adapter {
      -- Standard telescope options https://github.com/nvim-telescope/telescope.nvim#customization
      telescope_opts = {}
    
      -- RgGlobBuilderSetupOpts
      rg_glob_builder_opts = {}
    }
<

------------------------------------------------------------------------------
TODO                                                    *rg-glob-builder-todo*


- [ ] Adapter for snacks

vim:tw=78:ts=8:ft=help:norl: